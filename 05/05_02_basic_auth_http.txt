Basic-аутентификация HTTP

Несмотря на то, что эта аутентификация достаточно старая, ее относительная простота и легкость реализации ведет к тому, что можно достаточно часто видеть использование базовой аутентификации по HTTP.

При базовой HTTP-аутентификации клиент получает от сервера маркер аутентификации, который строится путем сцепления имени пользователя и пароля, а также их кодировки в Base64. Этот токен хранится и управляется браузером, который автоматически добавляет его в заголовок авторизации каждого последующего запроса следующим образом:

Authorization: Basic base64(username:password)

    По ряду причин это, как правило, не считается безопасным методом аутентификации.

Во-первых, он включает в себя многократную отправку учетных данных пользователя при каждом запросе. Если на веб-сайте также не реализована HSTS, учетные данные пользователя могут быть перехвачены в ходе атаки типа Man-in-the-Middle (человек посередине).

Кроме того, реализация базовой аутентификации HTTP часто не поддерживает защиту от переборов грубой силы. Поскольку токен состоит исключительно из статических значений, это может сделать его уязвимым для перебора.

Базовая аутентификация HTTP также особенно уязвима к атакам, связанным с сеансом, в частности к CSRF, от которых она сама по себе не обеспечивает никакой защиты.

В некоторых случаях использование уязвимой базовой HTTP-аутентификации может дать злоумышленнику доступ только к, казалось бы, неинтересной странице. Однако, в дополнение к обеспечению дополнительной поверхности атаки, учетные данные, раскрытые таким образом, могут быть повторно использованы в других, более конфиденциальных контекстах.
Уязвимости мультифакторной аутентификации

Многие веб-сайты полагаются исключительно на однофакторную аутентификацию с использованием пароля для аутентификации пользователей. Однако некоторые требуют от пользователей подтверждения их личности с помощью нескольких факторов аутентификации.

Проверка биометрических факторов является непрактичной для большинства веб сайтов. Однако все чаще встречается обязательная и необязательная двухфакторная аутентификация (2FA), основанная на том, что вы знаете и что у вас есть. Это
обычно требует от пользователей ввода как традиционного пароля, так и временного верификационного кода со стороннего физического устройства, находящегося у них в распоряжении.

Хотя иногда злоумышленник может получить один фактор, основанный на знаниях, например, пароль, вероятность одновременного получения другого фактора из стороннего источника значительно ниже. По этой причине двухфакторная аутентификация явно более безопасна, чем однофакторная. Однако, как и любая другая мера безопасности, она безопасна настолько, насколько и ее реализация. Плохо реализованную двухфакторную аутентификацию можно обойти частично или даже полностью, точно так же, как и однофакторную аутентификацию.

    Следует также отметить, что все преимущества многофакторной аутентификации достигаются только путем проверки множества различных факторов. Проверка одного и того же фактора двумя разными способами не является истинной двухфакторной аутентификацией.

    Одним из таких примеров является 2FA через электронную почту. Хотя пользователь должен предоставить пароль и проверочный код, доступ к коду предполагается на основе того, что пользователь знает учетные данные для входа в свою учетную запись электронной почты. Поэтому фактор проверки подлинности знания просто проверяется дважды.

Обход двухфакторной аутентификации возможен по разным причинам:

    Иногда реализация двухфакторной аутентификации бывает настолько несовершенной, что ее можно обойти полностью.
    Иногда ошибочная логика двухфакторной аутентификации означает, что после того, как пользователь выполнил начальный шаг входа в систему, веб-сайт не может адекватно проверить, что этот же пользователь выполняет второй шаг.
    А также, как и в случае с паролями, веб-сайты должны принимать меры по предотвращению перебора проверочного кода 2FA. Это особенно важно, потому что код часто представляет собой простое 4-х или 6-значное число. Без адекватной защиты взлом такого кода тривиален.

Уязвимости механизмов смены пароля, восстановления пароля, поддержания сессии

В дополнение к базовой функциональности входа в систему, большинство сайтов предоставляют дополнительные функциональные возможности, позволяющие пользователям управлять своей учетной записью. Например, пользователи обычно могут изменить свой пароль или сбросить его, когда они его забудут. Эти механизмы также могут добавлять уязвимости, которые могут быть использованы злоумышленником.

    Веб-сайты, как правило, стараются избежать известных уязвимостей на своих страницах входа. Однако легко упустить из виду тот факт, что необходимо предпринять аналогичные шаги, чтобы убедиться в том, что связанная с ними функциональность не менее надежна. Это особенно важно в тех случаях, когда злоумышленник может создать свою учетную запись и, следовательно, имеет легкий доступ к изучению этих дополнительных страниц.

Сторонние механизмы аутентификации, которые также могут быть уязвимы:

    Механизм поддержания сессии «запомнить меня»
    Механизм сброса пароля через E-mail
    Механизм сброса пароля с использованием URL и одноразового токена
    Механизм смены пароля
    
    

Материалы для самостоятельного изучения

    Серия нерегулярного подкаста с обсуждением основных атак на аутентификацию и угон аккаунтов
    https://t.me/cybersec_in_russian/5
    
    OWASP-памятка по реализации механизмов аутентификации
    https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md

Тренироваться на упражнениях можно на открытых платформах. Одна из лучших платформ по изучению проблем безопасности веб-приложений: PortSwigger Academy.
https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-different-responses


    Попрактикуемся в атаках на аутентификацию
    https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-different-responses



